
truncate和 delete只删除数据不删除表的结构(定义)

1) drop
The SQL DROP command is used to remove an object from the database.
If you drop a table, all the rows in the table is deleted and the table structure is removed from the database.
When a table is dropped all the references to the table will not be valid.
the integrity constraints will be dropped, grant or access privileges on the table will also be dropped


Syntax to drop a sql table structure:
  drop table tableName;

2) truncate
The SQL TRUNCATE command is used to delete all the rows from the table and free the space containing the table.

Syntax to truncate a table:
  truncate table tableName

3) delete
This command deletes only the rows from the table based on the condition given in the where clause 
or deletes all the rows from the table if no condition is specified. 
But it does not free the space containing the table.
After performing a DELETE operation you need to COMMIT or ROLLBACK the transaction to make the change permanent or to undo it.

Syntax to delete a table:
delete from table tableName [WHERE condition];
注：不会把数据完全删除，只是标注起来


Don't drop - it will delete the data and the definition.
If you delete - the data is gone and auto-increment values go on from the last value.
If you truncate - then it is like you just did create the table. No data and all counters resetted

Drop&Truncate is DDL, Delete is DML.


DELETE

DELETE is a DML Command.
DELETE statement is executed using a row lock, each row in the table is locked for deletion.
We can specify filters in where clause
It deletes specified data if where condition exists.
Delete activates a trigger because the operation are logged individually.
Slower than truncate because, it keeps logs.
Rollback is possible.
TRUNCATE

TRUNCATE is a DDL command.
TRUNCATE TABLE always locks the table and page but not each row.
Cannot use Where Condition.
It Removes all the data.
TRUNCATE TABLE cannot activate a trigger because the operation does not log individual row deletions.
Faster in performance wise, because it doesn't keep any logs.
Rollback is not possible.


TRUNCATE is not possible when table has referential keys to other tables.

DROP and TRUNCATE are DDL commands, whereas DELETE is a DML command. 
As such, DELETE operations can be rolled back (undone), while DROP and TRUNCATE operations cannot be rolled back.


不同点: 
1. truncate和 delete只删除数据不删除表的结构(定义) 
    drop语句将删除表的结构被依赖的约束(constrain),触发器(trigger),索引(index); 依赖于该表的存储过程/函数将保留,但是变为invalid状态. 
2.delete语句是dml,这个操作会放到rollback segement中,事务提交之后才生效;如果有相应的trigger,执行的时候将被触发. 
   truncate,drop是ddl, 操作立即生效,原数据不放到rollback segment中,不能回滚. 操作不触发trigger. 
3.delete语句不影响表所占用的extent, 高水线(high watermark)保持原位置不动 
  显然drop语句将表所占用的空间全部释放 
  truncate 语句缺省情况下见空间释放到 minextents个 extent,除非使用reuse storage;   truncate会将高水线复位(回到最开始). 
4.速度,一般来说: drop>; truncate >; delete 
5.安全性:小心使用drop 和truncate,尤其没有备份的时候.否则哭都来不及 
使用上,想删除部分数据行用delete,注意带上where子句. 回滚段要足够大. 
想删除表,当然用drop 
想保留表而将所有数据删除. 如果和事务无关,用truncate即可. 如果和事务有关,或者想触发trigger,还是用delete. 
如果是整理表内部的碎片,可以用truncate跟上reuse stroage,再重新导入/插入数据


# 删除有依赖关系的table
alter table MyOtherTable nocheck constraint all
delete from MyTable
alter table MyOtherTable check constraint all
